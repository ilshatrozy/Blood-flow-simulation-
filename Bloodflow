import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from IPython.display import HTML

fig, ax = plt.subplots(figsize=(10, 3))
fig.patch.set_facecolor('#440000')  # Dark red background
ax.set_xlim(0, 10)
ax.set_ylim(0, 4)
ax.axis('off')
ax.set_facecolor('#440000')

num_cells = 40
num_plasma = 60

x_cells = np.random.rand(num_cells) * 10
y_cells = 2 + 0.3 * np.sin(2 * np.pi * x_cells / 5) + (np.random.rand(num_cells) - 0.5) * 0.3
x_plasma = np.random.rand(num_plasma) * 10
y_plasma = 2 + (np.random.rand(num_plasma) - 0.5) * 1.0

cells = ax.scatter(x_cells, y_cells, color='#FF5555', s=80, edgecolors='darkred', linewidths=1, alpha=0.85)
plasma = ax.scatter(x_plasma, y_plasma, color='#FFFFCC', s=15, alpha=0.4)

def update(frame):
    global x_cells, y_cells, x_plasma, y_plasma
    x_cells = (x_cells + 0.04) % 10
    y_cells = 2 + 0.3 * np.sin(2 * np.pi * (x_cells + frame / 20) / 5) + (np.random.rand(num_cells) - 0.5) * 0.3
    cells.set_offsets(np.c_[x_cells, y_cells])
    x_plasma = (x_plasma + 0.02) % 10  # Slower movement
    y_plasma += (np.random.rand(num_plasma) - 0.5) * 0.05  # Slight jitter
    y_plasma = np.clip(y_plasma, 1, 3)  # Keep them in vessel bounds
    plasma.set_offsets(np.c_[x_plasma, y_plasma])

    return cells, plasma

ani = animation.FuncAnimation(fig, update, frames=200, interval=50)
HTML(ani.to_jshtml())
